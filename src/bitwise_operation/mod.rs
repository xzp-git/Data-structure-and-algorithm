



pub fn main() {
    const   C: i32 = 0b1001110; // 78
    const  B: i32 = 0x4E; // 78
    const  A: i32 = !C; // -79 取反
    let e = !A + 1; // 79
    let d = !C + 1; // -78 一个数的相反数等于它本身取反再加1
    println!("{}", C); // 78
    println!("{}", B); // 78
    println!("{}", A); // -79
    println!("{}", d); // -78
    println!("{}", e); // 79
    println!("=====================");
    println!("{:b}", i32::MIN); // -2147483648 (0x80000000) 最小值的相反数会发生溢出 
    // 2147483648 已经超出了i32的范围  i32的最大值是2147483647
    println!("=====================");
    println!("{:b}", !i32::MIN);// 01111111111111111111111111111111
    println!("{}", !i32::MIN); // 2147483647

    println!("=====================");

    const F: i32 = 0b0001010;
    const G: i32 = 0b0001100;
    // | & ^
    // 打印32位前面用零补齐
    println!("{0:032b}", F);
    println!("{0:032b}", G);
    println!("{0:032b}", F | G);
    println!("{0:032b}", F & G);
    println!("{0:032b}", F ^ G);

    println!("=====================");


    // << 左移  右边会空出来 用0 补齐
    const H:i32 = 0b1001101;
    const I:i32 = H << 1; // 左移一位 相当于乘以2
    println!("{0:032b}", H);
    println!("{0:032b}", I);
}